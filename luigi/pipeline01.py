import luigi
import sys, os
import shutil
from subprocess import call,check_call,Popen, PIPE
import time
import yaml
import datetime

import dakd.extract
import dakd.transform
import dakd.load
from dakd.utils import initConf
from dakd.utils import cleanEnvironment
from dakd.utils import prepareTestEnvironment
from dakd.utils import basicLogger
from dakd.utils import create_logger
from dakd.utils import basicLoggerDecorator




conf = initConf()
pipelineLogger = create_logger(conf["logger_pipeline"])

def debug():
    try:
        fin =open('./planner/lvl4.txt','r')
        print("lvl4.txt input file:")
        print(fin.readlines())
        print("---------")
        fin.close()
    except:
        print("lvl4.txt input file: empty")
        print("---------")
        return


class lvl1(luigi.Task):
    files = luigi.ListParameter()
    outputpath = ""

    def __init__(self,*args, **kwargs):
        super(lvl1, self).__init__(*args, **kwargs)
        self.conf = initConf()
        self.preparePaths()

    @basicLoggerDecorator(pipelineLogger)
    def preparePaths(self):
        self.outputpath = self.conf['lvl1_outputpath']
 
    @basicLoggerDecorator(pipelineLogger)
    def requires(self):
        return []
 
    @basicLoggerDecorator(pipelineLogger)
    def output(self):
        return luigi.LocalTarget(self.outputpath)
 
    @basicLoggerDecorator(pipelineLogger)
    def run(self):
        with self.output().open('w') as f:
            dakd.extract.prepareFiles(self.files,f)
        

class lvl2(luigi.Task):
    files = luigi.ListParameter()

    def __init__(self,*args, **kwargs):
        super(lvl2, self).__init__(*args, **kwargs)
        self.conf = initConf()
        self.preparePaths()

    @basicLoggerDecorator(pipelineLogger)
    def preparePaths(self):
        self.outputpath = self.conf['lvl2_outputpath']
    
    @basicLoggerDecorator(pipelineLogger)
    def requires(self):
        print("----lvl2-------------------")
        print("files:")
        print(self.files)
        return [lvl1(files=self.files)]
    
    @basicLoggerDecorator(pipelineLogger)
    def output(self):
        return luigi.LocalTarget(self.outputpath)
    
    @basicLoggerDecorator(pipelineLogger)
    def run(self):
        
        # create a copy of lvl planner file
        f = self.input()[0].open('r')
        finpath = f.name
        f.close()

        original = self.input()[0]
        backup = finpath + ".bak"
        original.copy( backup)

        # read from the copy, then  once done
        # open the original open('w') and remove the current line

        with open(backup,'r+') as fin:
            
            dakd.extract.runFileTest(original,fin,conf["lvl2_outputpath"])

        
        # when all elements have been processed, the lvl2 file can be deleted
        #original.open('w').write("")
        original.remove()

        if os.path.exists(backup):
            os.remove(backup)


class lvl3(luigi.Task):
    files = luigi.ListParameter()
    lvl4path = ""
    filepath = ""
    logpath = ""
    filename = ""
    destination = ""
    outputpath = ""
    fileout = ""
    logout = ""
    label =""

    def __init__(self,*args, **kwargs):
        super(lvl3, self).__init__(*args, **kwargs)
        self.conf = initConf()
        self.preparePaths("ccccc:bbb:aaa")

    @basicLoggerDecorator(pipelineLogger)
    def preparePaths(self, line):
        
        pipelineLogger.debug("line is:")
        pipelineLogger.debug(line)

        self.lvl4path = self.conf["lvl4path"]
        self.outputpath = self.conf["lvl3_outputpath"]
        self.filepath = line.strip()

        self.filepath, self.logfile, self.label = self.filepath.split(":")
        print("----lvl3: file - "+self.filepath+"  , log - "+self.logfile)
        self.filename = os.path.basename(self.filepath)
        self.destination = os.path.join(self.lvl4path,self.filename)

    
    @basicLoggerDecorator(pipelineLogger)
    def requires(self):
        print("----lvl3-------------------")
        print("files:")
        print(self.files)
        return [lvl2(files=self.files)]
 

    def output(self):
        return None
        #return luigi.LocalTarget(self.outputpath)
 
    @basicLoggerDecorator(pipelineLogger)
    def run(self):

        # create the output file empty first
        # fout = open(self.outputpath,'a')
        # fout.close()

        # create a copy of lvl planner file
        f = self.input()[0].open('r')
        finpath = f.name
        f.close()

        original = self.input()[0]
        backup = finpath + ".bak"
        original.copy( backup)

        with open(backup,'r') as fin:
            
            for line in fin:

                try:
                    if len(line) > 2:
                        self.preparePaths(line)
                        
                        partial = dakd.transform.transformation(self.logfile)
                        
                        # get label from original folder! or from virustotal
                        if partial[2] != "unknown" :
                            self.label= partial[2]

                        pipelineLogger.debug("updating data frame")
                        pipelineLogger.debug(self.label)
                        dakd.load.updateDataFrame(partial[0], partial[1],self.label)
                        
                        # move to lvl4 folder
                        #if os.path.exists(self.filepath):
                        #    pipelineLogger.debug("moving to "+self.filepath)
                        #    shutil.move(self.filepath, self.destination)
                        #else:
                        #    pipelineLogger.debug("not moving lvl3 result")

                        # delete line from self.input file
                        thename = ""
                        with original.open('r') as input:
                            thename = input.name
                            with open(thename+".new",'w') as output:
                                for line2 in input:
                                    if line!=line2:
                                        output.write(line2)

                        if os.path.exists(thename):
                            original.remove()
                            shutil.move(thename+".new",thename)

                        time.sleep(1)


                        fdone = open(conf["lvl4_done_list"],'a')
                        fdone.write("{}:{}\n".format(self.filepath,self.label))
                        fdone.close()

                        # fout = open(self.outputpath,'a')
                        # fout.write("{}:{}\n".format(self.filepath,self.label))
                        # fout.close()

                        time.sleep(1)
                        

                except Exception as e:
                    pipelineLogger.exception("some error in transform and load phase")
                    pipelineLogger.error(e, exc_info=True)
                    continue
                
            # rm lvl3.txt file
            #lvl3file = os.path.realpath(fin.name)
            #fin.close()
            #os.remove(lvl3file)

        # when all elements have been processed, the lvl2 file can be deleted
        #original.open('w').write("")
        original.remove()
        if os.path.exists(backup):
            os.remove(backup)



class lvl4(luigi.Task):


    def __init__(self,*args, **kwargs):
        super(lvl4, self).__init__(*args, **kwargs)
        self.conf = initConf()
        self.preparePaths()
        if self.conf["exec_mode"]=="testing":
            prepareTestEnvironment()
        elif self.conf["exec_mode"]=="real":
            cleanEnvironment()



    @basicLoggerDecorator(pipelineLogger)
    def preparePaths(self):
        self.outputpath = self.conf["lvl4_outputpath"]

    @basicLoggerDecorator(pipelineLogger)
    def requires(self):
        files= dakd.extract.fetchFiles()
        print("----lvl4-------------------")
        print("requires-files:")
        print(files)

        #one simple batch
        #return [lvl3(files=files)]
        
        #one run for file (safer )
        requirements=[]
        for elem in files:
            requirements.append(lvl3(files=[elem,]))

        return requirements


    @basicLoggerDecorator(pipelineLogger)
    def output(self):
        return None
        #return luigi.LocalTarget(self.outputpath)

    @basicLoggerDecorator(pipelineLogger)
    def run(self):
        print("-----RUN-Lvl4-------")

        # with self.input()[0].open('r') as fin, open(conf["lvl4_done_list"],'a') as out_file:
        #     for line in fin:
        #         print(line)
        #         out_file.write(line)
        #         print("written!")

        # if len(self.input())>0:
        #     self.input()[0].remove()
        
        # self.output().open('w').write("done!")



     
if __name__ == '__main__':
    luigi.run()