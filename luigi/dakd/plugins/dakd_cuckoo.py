import  os
import json
import sys, traceback
import shutil
import time
import yaml
import requests
import re
from .plugin_utils import create_pluginlogger
from .plugin_utils import pluginLoggerDecorator
from .plugin_utils import shellexec
from .plugin_utils import shellexecV

def initConf():
    """
        every plugin uses its own config file
    """
    return yaml.load(open(os.path.abspath(__file__).replace('.py','.conf'),'r'))

conf = initConf()
extractLogger = create_pluginlogger(conf["logger_extract"],conf)
transformLogger = create_pluginlogger(conf["logger_transform"],conf)



class dakd_plugin():

    taskid = ""
    filepath = ""
    #---------plugin-code--------------------------------------------------


    





    @pluginLoggerDecorator(extractLogger)
    def submit(self, newfilepath):
        """ Runs a procmon prepared analysis """

        # prepare paths
        filepath = newfilepath.strip()
        self.filepath = filepath

        
        if conf["api"]=="yes":
            # call API submit

            extractLogger.debug(filepath)
            r = requests.post(conf["server"]+conf["port"]+"/tasks/create/submit", files=[
                ("files", open(filepath, "rb")),
                ],
                data=[("options",{"procmon":"yes"}),])

            # Add your code to error checking for r.status_code.
            extractLogger.debug(r.status_code)
            if r.status_code != 200:
                return False

            submit_id = r.json()["submit_id"]
            task_ids = r.json()["task_ids"]
            errors = r.json()["errors"]

            self.taskid = task_ids[0]

        else:

            #call cuckoo submit
            out,err=shellexecV(conf["cuckoo_bin_path"]+'cuckoo submit --options procmon=1 '+os.path.abspath(filepath), cwd='..')
            extractLogger.debug(out)
            extractLogger.debug(err)
            self.taskid = out.decode('utf-8').split('#')[-1].split('\\')[0]





        return True


    @pluginLoggerDecorator(extractLogger)
    def status(self):
        """
        No status implemented, so return True
        """
        iterations = 0
        extractLogger.debug(self.taskid)
        while iterations < 200:
            r = requests.get(conf["server"]+conf["port"]+"/tasks/view/"+str(self.taskid))
            
            extractLogger.debug(r.status_code)
            if r.status_code != 200:

                return False

            extractLogger.debug(r.json()["task"])

            if r.json()["task"]["status"] != "reported":
                print("status: "+r.json()["task"]["status"]+", waiting for cuckoo analysis to complete..."+str(iterations))
                time.sleep(10)
                iterations +=1
            else:
                return True


        return False


    @pluginLoggerDecorator(extractLogger)
    def download(self, folderpath):
        """ download from cuckoo web server and save to file """
        
        r = requests.get(conf["server"]+conf["port"]+"/tasks/report/"+str(self.taskid))
            
        if r.status_code != 200:
            return False

        report = r.json()


        self.runFileTestGatherResults(
                filename=self.filepath, 
                destination=folderpath,
                report=report)
        
        return True
       

    @pluginLoggerDecorator(transformLogger)
    def parse(self, filepath):
        """

           APIStats
            r['behavior']['apistats']
            r['behavior']['processes'][?][calls]
            
            Procmon:
            r['procmon'][?]['Path']
            r['procmon'][?]['Operation']
            if r['procmon'][i]['Process_name'] == process_name


            returns a dictionary
        """

        report = json.load(open(filepath,'r'))

        filename = os.path.basename(filepath)
        auxname = filename.split(".")
        auxname = filename[:filename.index(auxname[-1])]+"exe"
        
        target_name = filename

        try:

            result={}
            # extract all api stats
            result["apistats"] = report['behavior']['apistats']

            # extract all imagepath
            result_procmon = {}
            
            if 'procmon' in report.keys():
                for event in report['procmon']:
                    try:
                        if event['Process_Name'].startswith(auxname):

                            op = event["Operation"]
                            path = event["Path"]
                            #id = op+"_"+path
                            id = path
                            if not path :
                                id = op
                                #id = op + "_" + event["Detail"]+"_"+event["Result"]
                                #id = re.sub(r'(.*Users\\)[a-zA-Z0-9]+((\\){0,1}.*|$)','\\1username\\2',id)
                                
                            else:
                                path = re.sub(r'(.*Users\\)[a-zA-Z0-9]+((\\){0,1}.*|$)','\\1username\\2',path)
                                id=path
                            

                            if id in list(result_procmon.keys()):
                                result_procmon[id]+=1
                            else:
                                result_procmon[id]=1

                    except Exception as e:
                        transformLogger.exception("some error in target procmon parsing")
                        transformLogger.error(e, exc_info=True)
                        continue

            
            result["procmon"] = result_procmon

            result["label"] = "unknown"
            result["sha256"] = "" 
            try:
                if 'sha256' in report['target']['file']:
                    #r['virustotal']['sha256']
                    result["hash"] = {}
                    result["hash"]['sha256'] = report['target']['file']['sha256']
                    result["hash"]['sha512'] = report['target']['file']['sha512']
                    result["hash"]['sha1'] = report['target']['file']['sha1']
                    result["hash"]['md5'] = report['target']['file']['md5']
            except Exception as e:
                transformLogger.exception("some error in target sha256 parsing")
                transformLogger.error(e, exc_info=True)

            if 'virustotal' in report.keys():
                try:
                    transformLogger.debug("virustotal analysis ")
                    transformLogger.debug(report['virustotal']['positives'])


                    if int(report['virustotal']['positives'])>0:
                        #somehow extract the first or the more recurrent classifications
                        # or take a sole antivirus... Symantec, Kaspersky...

                        detection = ""
                        for av in conf["Antivirus"]:
                            if report['virustotal']['scans'][av]['detected']==True:
                                detection = report['virustotal']['scans'][av]['result'].lower()
                                break    

                        # from more specificc category to more gen√®ric category, look all acronyms for each
                        for cat in conf["categories"]:
                            
                            categories = []
                            catname = ""
                            for k,v in cat.items():
                                categories=v
                                catname=k

                            acronyms = re.split('\.|:|/', detection)
                            transformLogger.debug("detection acronyms:")
                            transformLogger.debug(acronyms)
                            transformLogger.debug("categories:")
                            transformLogger.debug(catname)
                            transformLogger.debug(categories)
				
                            for acronym in acronyms:
                                if acronym.lower() in categories:
                                    result["label"] = catname
                                    break

                            transformLogger.debug("label: ")
                            transformLogger.debug(result["label"])
            
                except Exception as e:
                    transformLogger.exception("some error in virustotal parsing")
                    transformLogger.error(e, exc_info=True)

            try:
                target_name = report["target"]["file"]["name"]
            except:
                transformLogger.exception(" result[target][file][name] not found, using filepath")

            return (target_name, result, result["label"])

        except Exception as e:
            transformLogger.exception("filename not found! "+auxname)
            #traceback.print_exc(file=sys.stdout)
            transformLogger.error(e, exc_info=True)
        

        return


    @pluginLoggerDecorator(extractLogger)
    def runFileTestGatherResults(self, filename, destination, report):

        # move exe file to destination folder
        # fileout = os.path.join(os.path.abspath(destination),os.path.basename(filename))
        # if os.path.exists(destination):
        #     shutil.move(filename, fileout)

        # move log file to destination folder
        filename = os.path.basename(filename)
        auxname = filename.split(".")
        auxname = filename[:filename.index(auxname[-1])]+conf["log_file_extension"]
        logout = os.path.join(destination,auxname)

        f = open(logout,'w')
        json.dump(report, f)
        
