import  os
import json
import sys, traceback
import shutil
import time
import yaml
from lxml import etree
from .plugin_utils import create_pluginlogger
from .plugin_utils import pluginLoggerDecorator



def initConf():
    """
        every plugin uses its own config file
    """
    return yaml.load(open(os.path.abspath(__file__).replace('.py','.conf'),'r'))

conf = initConf()

extractLogger = create_pluginlogger(conf["logger_extract"],conf)
transformLogger = create_pluginlogger(conf["logger_transform"],conf)


class dakd_plugin():

    filepath = ""
    logfile = ""

    #---------plugin-code--------------------------------------------------



    @pluginLoggerDecorator(extractLogger)
    def runFileTestMoveFiles(self, filepath, filename, destination):
        
        # move to vagrant folder
        if os.path.exists(filepath):
            shutil.move(filepath,destination)
            self.filename =destination
            
        else:
            raise Exception('filepath'+filepath+' does not exist')



    @pluginLoggerDecorator(extractLogger)
    def runFileTestGatherResults(self, filename, destination):

        # move exe file to destination folder
        #fileout = os.path.join(os.path.abspath(destination),os.path.basename(filename))
        #if os.path.exists(destination):
        #    shutil.move(filename, fileout)

        # move log file to destination folder
        filename = os.path.basename(filename)
        auxname = filename.split(".")
        auxname = filename[:filename.index(auxname[-1])]+conf["log_file_extension"]
        logout = os.path.join(destination,auxname)

        logfile = conf["mock_xml1"]


        if os.path.exists(logfile):
            shutil.copy(logfile, logout)
        else:
            raise Exception("logfile"+logfile+" does not exist")
        


    @pluginLoggerDecorator(extractLogger)
    def submit(self, newfilepath):
        """ Mocks an analysis plugin, the result is already prepared """
        
        # prepare paths
        filepath = newfilepath.strip()
        filename = os.path.basename(filepath)
        destination = os.path.join(conf["vagrantpath"], filename)
        
        self.runFileTestMoveFiles(
            filepath=filepath,
            filename=filename,
            destination=destination)

        return True


    @pluginLoggerDecorator(extractLogger)
    def status(self):
        """
        Mock status is always done, so return True
        """
        return True

    @pluginLoggerDecorator(extractLogger)
    def download(self, folderpath):
        """ move a specially prepared log.xml file to vagrantpath2 """

        self.runFileTestGatherResults(
                filename=self.filename, 
                destination=folderpath)

        return True
       

    @pluginLoggerDecorator(transformLogger)
    def parse(self, filepath):
        """

        1. get filename from folder
        2. read into lxml
        3. extract all event nodes
        4. initialize the result dict
        5. for each node
            get operation and path
            if no operation-path elemen in dict
                create a new entry, add value 1
            else
                increment value of the entry
        6. write this as a json?


        """
        doc = etree.parse(filepath)

        filename = os.path.basename(filepath)
        auxname = filename.split(".")
        auxname = filename[:filename.index(auxname[-1])]+"exe"
        

        processpath="".join([conf["procmon_processpath"],auxname])

        try:

            # extract all imagepath
            expr = conf["xpath_procmon_imagepath"] 
            pi = doc.xpath(expr)
            
            for elem in pi:
                if elem.text.startswith(conf["procmon_processpath"]):
                    processpath=elem.text

            expr = conf["xpath_procmon_processIndex"]
            pi = doc.xpath(expr, name = processpath )[0].text

            print(pi)
            expr = conf["xpath_procmon_eventlist"]
            e = doc.xpath(expr, name = pi)

            result={}

            for event in e:
                try:
                    op = event.xpath(conf["xpath_Operation"])[0].text
                    path = event.xpath(conf["xpath_Path"])[0].text
                    id = op+"_"+path
                    if id in list(result.keys()):
                        result[id]+=1
                    else:
                        result[id]=1

                except:
                    continue

            return (os.path.basename(filepath), result)

        except Exception:
            print("filename not found! "+processpath)
            traceback.print_exc(file=sys.stdout)
        

        return