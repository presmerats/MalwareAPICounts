import yaml
import sys, os
from os import getpid
import psutil
import shutil
from subprocess import call,check_call,Popen, PIPE
import time
import functools
import logging
import types
import traceback

def shellexec(command, logfile="", cwd="."):

    my_env = os.environ.copy()
    if my_env["PATH"].find("/usr/sbin:/sbin:") < 0 :
        my_env["PATH"] = "/usr/sbin:/sbin:" + my_env["PATH"]
    p = Popen([command], cwd=cwd, shell=True, env=my_env, stdout=PIPE,stderr=PIPE)
    (out,err) = p.communicate()
    print(logfile)
    print(type(logfile))
    if isinstance(logfile,str):
        if logfile != "" and os.path.exists(logfile):
            logfile.write(out.decode("utf-8"))
            logfile.write("\n")
            logfile.write(err.decode("utf-8"))
            logfile.write("\n")

def shellexecV(command, logfile="", cwd="."):

    my_env = os.environ.copy()
    if my_env["PATH"].find("/usr/sbin:/sbin:") < 0 :
        my_env["PATH"] = "/usr/sbin:/sbin:" + my_env["PATH"]
    p = Popen([command], cwd=cwd, shell=True, env=my_env, stdout=PIPE,stderr=PIPE)
    (out,err) = p.communicate()

    return (out,err)


def create_pluginlogger(name, conf):
    """
    Creates a logging object and returns it
    """

    logger = logging.getLogger(name)
    logger.setLevel(logging.DEBUG)
 
    # create the logging file handler
    fh = logging.FileHandler(conf["basic_log_file"])
 
    fmt = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    formatter = logging.Formatter(fmt)
    fh.setFormatter(formatter)
 
    # add handler to logger object
    logger.addHandler(fh)
    return logger


def pluginLoggerDecorator(logger):


    """
    A decorator that wraps the passed in function and logs 
    exceptions should one occur

    @param logger: The logging object
    """

    def decorator(function):
    

        def wrapper(*args, **kwargs):
            
            logger.debug("-----"+function.__name__+"-------------------------")
            try:
                logger.debug("params:")
               
                for arg in args:
                    try:
                        logger.debug(str(arg))
        
                    except Exception as e:
                        logging.error(e, exc_info=True)

                for key,value in kwargs.items():
                    try:
                        logger.debug("     "+key+"=")
                        logger.debug(value)
                    except Exception as e:
                        logging.error(e, exc_info=True)
                        logger.debug("     "+key+"=couldn't print args")

                retval = function(*args, **kwargs)
                logger.debug("----------------------------"+function.__name__+"--end.")
                return retval

            except Exception as e:
                # log the exception
                err = "There was an exception in  "
                err += function.__name__
                logging.error(err, e, exc_info=True)
     
                # re-raise the exception
                raise

        return wrapper
    
    return decorator