lda.model <- lda(trainingset$label ~ ., data=trainingset)
# prediction
lda.prediction <- predict(object = lda.model, newdata = testset)
prediction.results <- data.frame(label=lda.prediction$class,
lda=lda.prediction$x,
reallabel=testset$label)
# accuracy computation
errors <- prediction.results[ which(prediction.results$reallabel != prediction.results$label),]
accuracy <- round(1 - nrow(errors)/nrow(prediction.results),4)
accuracy
# Hyperparameter selection - final automated computation
accuracies <- num.princomp.validation(csvData2)
# Performance of the model
#dataset.Stats(csvData2)
create.stratified.K.folds(csvData2,10, length(csvData2))
library(MASS)
setwd("/home/pau/Projectes/dakd-project/R")
source('exploration_functions.R')
source('pca_functions.R')
source('validation_functions.R')
pca.dataset <- pca.computation(csvData2,52)
eraseme <- kfold.stratified.validation(pca.dataset)
eraseme
eraseme <- kfold.stratified.validation(pca.dataset)
eraseme
source('validation_functions.R')
eraseme <- kfold.stratified.validation(pca.dataset)
eraseme
# Performance of the model
pca.dataset <- pca.computation(csvData2,52)
accuracy <- kfold.stratified.validation(pca.dataset)
accuracy
source('validation_functions.R')
# Performance of the model
pca.dataset <- pca.computation(csvData2,52)
accuracy <- kfold.stratified.validation(pca.dataset)
source('validation_functions.R')
accuracy <- kfold.stratified.validation(pca.dataset)
source('validation_functions.R')
accuracy <- kfold.stratified.validation(pca.dataset)
accuracy
source('validation_functions.R')
accuracy <- kfold.stratified.validation(pca.dataset)
accuracy
source('validation_functions.R')
# Performance of the model
pca.dataset <- pca.computation(csvData2,52)
accuracy <- kfold.stratified.validation(pca.dataset)
source('validation_functions.R')
accuracy <- kfold.stratified.validation(pca.dataset)
accuracy
source('validation_functions.R')
accuracy <- kfold.stratified.validation(pca.dataset)
accuracy
source('validation_functions.R')
accuracy <- kfold.stratified.validation(pca.dataset)
accuracy
library(MASS)
setwd("/home/pau/Projectes/dakd-project/R")
source('exploration_functions.R')
source('pca_functions.R')
source('fda_functions.R')
source('validation_functions.R')
# load the dataset
csvData2 <- read.csv(file="data_20171231.csv", header=TRUE, sep=",")
csvData2 <- filter.minor.classes(csvData2)
# Hyperparameter selection - first manual iteration
# prepare training and test sets
pca.data <- prcomp(csvData2[,c(9:length(csvData2))])
pca.dataset <- data.frame(pca.data$x[,c(1:5)])
pca.dataset$label <- csvData2$label
trainingset <- pca.dataset[c(1:(nrow(pca.dataset)/2) ),]
testset <- pca.dataset[c( (nrow(pca.dataset)/2):nrow(pca.dataset)),]
# train the model
lda.model <- lda(trainingset$label ~ ., data=trainingset)
# prediction
lda.prediction <- predict(object = lda.model, newdata = testset)
prediction.results <- data.frame(label=lda.prediction$class,
lda=lda.prediction$x,
reallabel=testset$label)
# accuracy computation
errors <- prediction.results[ which(prediction.results$reallabel != prediction.results$label),]
accuracy <- round(1 - nrow(errors)/nrow(prediction.results),4)
accuracy
# Performance of the model
pca.dataset <- pca.computation(csvData2,52)
accuracy <- kfold.stratified.validation(pca.dataset)
accuracy
# benchmark file
library(MASS)
setwd("/home/pau/Projectes/dakd-project/R")
source('exploration_functions.R')
source('pca_functions.R')
source('fda_functions.R')
source('validation_functions.R')
# Performance of the model
pca.dataset <- pca.computation(csvData2,52)
accuracy <- kfold.stratified.validation(pca.dataset)
accuracy
# load the dataset
csvData2 <- read.csv(file="data_20171231.csv", header=TRUE, sep=",")
csvData2 <- filter.minor.classes(csvData2)
# Performance of the model: PCA+FDA
pca.dataset <- pca.computation(csvData2,52)
fda.accuracy <- kfold.stratified.validation(pca.dataset)
fda.accuracy
#SVM
setwd("/home/pau/Projectes/dakd-project/R")
source('exploration_functions.R')
source('pca_functions.R')
source('fda_functions.R')
source('validation_functions.R')
# load the dataset
csvData2 <- read.csv(file="data_20171231.csv", header=TRUE, sep=",")
csvData2 <- filter.minor.classes(csvData2)
library(e1071)
data <- csvData2[,c(9:length(csvData2))]
model_svm <- svm(csvData2$label ~ . , data)
#SVM
setwd("/home/pau/Projectes/dakd-project/R")
source('exploration_functions.R')
source('pca_functions.R')
source('fda_functions.R')
source('validation_functions.R')
# load the dataset
csvData2 <- read.csv(file="data_20171231.csv", header=TRUE, sep=",")
csvData2 <- filter.minor.classes(csvData2)
library(e1071)
data <- csvData2[,c(9:length(csvData2))]
svm_model <- svm(csvData2$label ~ . , data=data, method="C-classification", kernel="linear")
library(MASS)
setwd("/home/pau/Projectes/dakd-project/R")
source('exploration_functions.R')
source('pca_functions.R')
source('fda_functions.R')
source('validation_functions.R')
# load the dataset
csvData2 <- read.csv(file="data_20171231.csv", header=TRUE, sep=",")
csvData2 <- filter.minor.classes(csvData2)
# Hyperparameter selection - first manual iteration
# prepare training and test sets
pca.data <- prcomp(csvData2[,c(9:length(csvData2))])
pca.dataset <- data.frame(pca.data$x[,c(1:5)])
pca.dataset$label <- csvData2$label
trainingset <- pca.dataset[c(1:(nrow(pca.dataset)/2) ),]
testset <- pca.dataset[c( (nrow(pca.dataset)/2):nrow(pca.dataset)),]
# train the model
lda.model <- lda(trainingset$label ~ ., data=trainingset)
# prediction
lda.prediction <- predict(object = lda.model, newdata = testset)
prediction.results <- data.frame(label=lda.prediction$class,
lda=lda.prediction$x,
reallabel=testset$label)
# accuracy computation
errors <- prediction.results[ which(prediction.results$reallabel != prediction.results$label),]
accuracy <- round(1 - nrow(errors)/nrow(prediction.results),4)
accuracy
# Performance of the model
pca.dataset <- pca.computation(csvData2,52)
accuracy <- kfold.stratified.validation(pca.dataset)
source('benchmark_functions.R')
accuracy <- kfold.stratified.validation(pca.dataset)
source('benchmark_functions.R')
# Performance of the model
pca.dataset <- pca.computation(csvData2,52)
accuracy <- kfold.stratified.validation(pca.dataset)
source('benchmark_functions.R')
source('validation_functions.R')
accuracy <- kfold.stratified.validation(pca.dataset)
accuracy
library(MASS)
setwd("/home/pau/Projectes/dakd-project/R")
source('exploration_functions.R')
source('pca_functions.R')
source('fda_functions.R')
source('validation_functions.R')
source('benchmark_functions.R')
# load the dataset
csvData2 <- read.csv(file="data_20171231.csv", header=TRUE, sep=",")
csvData2 <- filter.minor.classes(csvData2)
# Hyperparameter selection - first manual iteration
# prepare training and test sets
pca.data <- prcomp(csvData2[,c(9:length(csvData2))])
pca.dataset <- data.frame(pca.data$x[,c(1:5)])
pca.dataset$label <- csvData2$label
trainingset <- pca.dataset[c(1:(nrow(pca.dataset)/2) ),]
testset <- pca.dataset[c( (nrow(pca.dataset)/2):nrow(pca.dataset)),]
# train the model
lda.model <- lda(trainingset$label ~ ., data=trainingset)
# prediction
lda.prediction <- predict(object = lda.model, newdata = testset)
prediction.results <- data.frame(label=lda.prediction$class,
lda=lda.prediction$x,
reallabel=testset$label)
# accuracy computation
errors <- prediction.results[ which(prediction.results$reallabel != prediction.results$label),]
accuracy <- round(1 - nrow(errors)/nrow(prediction.results),4)
accuracy
# Performance of the model
pca.dataset <- pca.computation(csvData2,52)
accuracy <- kfold.stratified.validation(pca.dataset)
accuracy
# benchmark file
library(MASS)
library(e1071)
setwd("/home/pau/Projectes/dakd-project/R")
source('exploration_functions.R')
source('pca_functions.R')
source('fda_functions.R')
source('validation_functions.R')
source('benchmark_functions.R')
# load the dataset
csvData2 <- read.csv(file="data_20171231.csv", header=TRUE, sep=",")
csvData2 <- filter.minor.classes(csvData2)
# Performance of the PCA+FDA model
pca.dataset <- pca.computation(csvData2,52)
fda.accuracy <- kfold.stratified.validation(pca.dataset)
fda.accuracy
# Performance of the PCA+FDA model
pca.dataset <- pca.computation(csvData2,52)
fda.accuracy <- kfold.stratified.validation(pca.dataset,"pcafda")
fda.accuracy
# Performance of the SVM model
fda.accuracy <- kfold.stratified.validation(pca.dataset,"svm")
data <- csvData2[,c(9:length(csvData2))]
#model_svm <- svm(csvData2$label ~ . , data)
svm_model <- svm(csvData2$label ~ . , data=data, method="C-classification", kernel="linear")
svm_model
prediction <-predict(svm_model,data[c(1:1000),])
pred <- predict(model_svm, data)
pred
pred[c(1:2),]
pred
pred$x[c(1:2),]
pred[1]
#SVM
setwd("/home/pau/Projectes/dakd-project/R")
source('exploration_functions.R')
source('pca_functions.R')
source('fda_functions.R')
source('validation_functions.R')
pred
svm.model.predictor <- function(model, testData2){
model.prediction <- predict(object = model, newdata = testData2)
dataset <- data.frame(label=model.prediction,
lda=c(1:length(model.prediction)),
#hash=testData2$md5,
reallabel=testData2$label)
return(dataset)
}
pred <- predict(model_svm, data)
pred
dataset <- svm.model.predictor(pred,data)
dataset <- svm.model.predictor(model_svm,data)
model.prediction <- predict(model_svm, data)
dataset <- data.frame(label=model.prediction,
lda=c(1:length(model.prediction)),
#hash=testData2$md5,
reallabel=data$label)
df <- data.frame(LDA1=pred, LDA2=lda.values$x[,2], class=lda.values$class, realc=pca.dataset$label )
dataset <- data.frame(label=model.prediction,
lda=c(1:length(model.prediction)),
reallabel=data$label)
#dataset <- svm.model.predictor(model_svm,data)
nrow(model.prediction)
model.prediction <- predict(model_svm, data)
#dataset <- svm.model.predictor(model_svm,data)
nrow(model.prediction)
model.prediction
#dataset <- svm.model.predictor(model_svm,data)
length(model.prediction)
table(model.prediction)
read.table(model.prediction)
dataset <- data.frame(label=model.prediction,
lda=c(1:length(model.prediction)),
reallabel=data$label)
dataset <- data.frame(label=model.prediction,
lda=c(1:(length(model.prediction))),
reallabel=data$label)
c(1:(length(model.prediction))
)
nrow(c(1:(length(model.prediction))))
nrows(c(1:(length(model.prediction))))
dataset <- data.frame(label=model.prediction,
reallabel=data$label)
nrow(model.prediction)
nrow(data$label)
nrow(data$label)
dataset <- data.frame(label=model.prediction,
lda=c(1:length(model.prediction)),
reallabel=csvData2$label)
model.prediction <- predict(model_svm, data)
dataset <- svm.model.predictor(model_svm,data)
model.prediction <- predict(model_svm, data)
dataset <- svm.model.predictor(model_svm,data)
length(model.prediction)
dataset <- svm.model.predictor(model_svm,data)
model.prediction <- predict(model_svm, data)
dataset <- data.frame(label=model.prediction,
lda=c(1:length(model.prediction)),
reallabel=csvData2$label)
errors <- dataset[ which(dataset$reallabel != dataset$label),]
errors
nrow(errors)
setwd("/home/pau/Projectes/dakd-project/R")
source('exploration_functions.R')
source('pca_functions.R')
source('fda_functions.R')
source('validation_functions.R')
source('benchmark_functions.R')
# load the dataset
csvData2 <- read.csv(file="data_20171231.csv", header=TRUE, sep=",")
csvData2 <- filter.minor.classes(csvData2)
# Performance of the PCA+FDA model
pca.dataset <- pca.computation(csvData2,52)
fda.accuracy <- kfold.stratified.validation(pca.dataset,"pcafda")
fda.accuracy
# Performance of the SVM model
svm.accuracy <- kfold.stratified.validation(pca.dataset,"svm")
svm.accuracy
# Performance of the majority class model
svm.accuracy <- kfold.stratified.validation(pca.dataset,"majority")
setwd("/home/pau/Projectes/dakd-project/R")
source('exploration_functions.R')
source('pca_functions.R')
source('fda_functions.R')
source('validation_functions.R')
source('benchmark_functions.R')
# benchmark file
library(MASS)
library(e1071)
setwd("/home/pau/Projectes/dakd-project/R")
source('exploration_functions.R')
source('pca_functions.R')
source('fda_functions.R')
source('validation_functions.R')
source('benchmark_functions.R')
# load the dataset
csvData2 <- read.csv(file="data_20171231.csv", header=TRUE, sep=",")
csvData2 <- filter.minor.classes(csvData2)
# Performance of the majority class model
svm.accuracy <- kfold.stratified.validation(pca.dataset,"majority")
# Performance of the SVM model
svm.accuracy <- kfold.stratified.validation(csvData2,"svm")
svm.accuracy
104+130+138+114+152+163+149
(104+130+138+114+152+163+149+98+162)/(225*9)
# load the dataset
csvData2 <- read.csv(file="data_20171231.csv", header=TRUE, sep=",")
csvData2 <- filter.minor.classes(csvData2)
dataset <-
# Performance of the majority class model
svm.accuracy <- kfold.stratified.validation(csvData2,"majority")
# benchmark file
library(MASS)
library(e1071)
setwd("/home/pau/Projectes/dakd-project/R")
source('exploration_functions.R')
source('pca_functions.R')
source('fda_functions.R')
source('validation_functions.R')
source('benchmark_functions.R')
# load the dataset
csvData2 <- read.csv(file="data_20171231.csv", header=TRUE, sep=",")
csvData2 <- filter.minor.classes(csvData2)
dataset <-
# Performance of the majority class model
svm.accuracy <- kfold.stratified.validation(csvData2,"majority")
dataset <- csvData2[,c(9:ncol(csvData2))]
# load the dataset
csvData2 <- read.csv(file="data_20171231.csv", header=TRUE, sep=",")
csvData2 <- filter.minor.classes(csvData2)
dataset <- csvData2[,c(9:ncol(csvData2))]
dataset$label <- csvData2$label
# Performance of the majority class model
majority.accuracy <- kfold.stratified.validation(dataset,"majority")
setwd("/home/pau/Projectes/dakd-project/R")
source('exploration_functions.R')
source('pca_functions.R')
source('fda_functions.R')
source('validation_functions.R')
source('benchmark_functions.R')
# load the dataset
csvData2 <- read.csv(file="data_20171231.csv", header=TRUE, sep=",")
csvData2 <- filter.minor.classes(csvData2)
dataset <- csvData2[,c(9:ncol(csvData2))]
dataset$label <- csvData2$label
# Performance of the majority class model
majority.accuracy <- kfold.stratified.validation(dataset,"majority")
source('benchmark_functions.R')
setwd("/home/pau/Projectes/dakd-project/R")
source('exploration_functions.R')
source('pca_functions.R')
source('fda_functions.R')
source('validation_functions.R')
source('benchmark_functions.R')
# load the dataset
csvData2 <- read.csv(file="data_20171231.csv", header=TRUE, sep=",")
csvData2 <- filter.minor.classes(csvData2)
dataset <- csvData2[,c(9:ncol(csvData2))]
dataset$label <- csvData2$label
# Performance of the majority class model
majority.accuracy <- kfold.stratified.validation(dataset,"majority")
round(majority.accuracy*100,2)
# benchmark file
library(MASS)
library(e1071)
setwd("/home/pau/Projectes/dakd-project/R")
source('exploration_functions.R')
source('pca_functions.R')
source('fda_functions.R')
source('validation_functions.R')
source('benchmark_functions.R')
# load the dataset
csvData2 <- read.csv(file="data_20171231.csv", header=TRUE, sep=",")
csvData2 <- filter.minor.classes(csvData2)
dataset <- csvData2[,c(9:ncol(csvData2))]
dataset$label <- csvData2$label
# Performance of the majority class model
majority.accuracy <- kfold.stratified.validation(dataset,"majority")
round(majority.accuracy*100,2)
# load the dataset
csvData2 <- read.csv(file="data_20171231.csv", header=TRUE, sep=",")
csvData2 <- filter.minor.classes(csvData2)
dataset <- csvData2[,c(9:ncol(csvData2))]
dataset$label <- csvData2$label
# Performance of the random class model
random.accuracy <- kfold.stratified.validation(dataset,"random")
round(random.accuracy*100,2)
source('benchmark_functions.R')
# load the dataset
csvData2 <- read.csv(file="data_20171231.csv", header=TRUE, sep=",")
csvData2 <- filter.minor.classes(csvData2)
dataset <- csvData2[,c(9:ncol(csvData2))]
dataset$label <- csvData2$label
# Performance of the random class model
random.accuracy <- kfold.stratified.validation(dataset,"random")
round(random.accuracy*100,2)
# Performance of the majority class model
majority.accuracy <- kfold.stratified.validation(dataset,"majority")
round(majority.accuracy*100,2)
# Performance of the PCA+FDA model
pca.dataset <- pca.computation(csvData2,52)
fda.accuracy <- kfold.stratified.validation(csvData2,"pcafda")
# Performance of the PCA+FDA model
pca.dataset <- pca.computation(csvData2,52)
fda.accuracy <- kfold.stratified.validation(pca.dataset,"pcafda")
round(fda.accuracy*100,2)
setwd("/home/pau/Projectes/dakd-project/R")
source('exploration_functions.R')
source('pca_functions.R')
source('fda_functions.R')
source('validation_functions.R')
source('benchmark_functions.R')
# load the dataset
csvData2 <- read.csv(file="data_20171231.csv", header=TRUE, sep=",")
csvData2 <- filter.minor.classes(csvData2)
dataset <- csvData2[,c(9:ncol(csvData2))]
dataset$label <- csvData2$label
# Performance of the random class model
random.accuracy <- kfold.stratified.validation(dataset,"random")
round(random.accuracy*100,2)
# Performance of the random class model
random.accuracy <- kfold.stratified.validation(dataset,"random")
round(random.accuracy*100,2)
# Performance of the random class model
random.accuracy <- kfold.stratified.validation(dataset,"random")
round(random.accuracy*100,2)
# Performance of the random class model
random.accuracy <- kfold.stratified.validation(dataset,"random")
round(random.accuracy*100,2)
# Performance of the majority class model
majority.accuracy <- kfold.stratified.validation(dataset,"majority")
round(majority.accuracy*100,2)
# Performance of the PCA+FDA model
pca.dataset <- pca.computation(csvData2,52)
fda.accuracy <- kfold.stratified.validation(pca.dataset,"pcafda")
round(fda.accuracy*100,2)
# Performance of the majority class model
majority.accuracy <- kfold.stratified.validation(dataset,"majority")
round(majority.accuracy*100,2)
# Performance of the PCA+FDA model
pca.dataset <- pca.computation(csvData2,52)
fda.accuracy <- kfold.stratified.validation(pca.dataset,"pcafda")
round(fda.accuracy*100,2)
# benchmark file
library(MASS)
library(e1071)
setwd("/home/pau/Projectes/dakd-project/R")
source('exploration_functions.R')
source('pca_functions.R')
source('fda_functions.R')
source('validation_functions.R')
source('benchmark_functions.R')
# load the dataset
csvData2 <- read.csv(file="data_20171231.csv", header=TRUE, sep=",")
csvData2 <- filter.minor.classes(csvData2)
dataset <- csvData2[,c(9:ncol(csvData2))]
dataset$label <- csvData2$label
# Performance of the random class model
random.accuracy <- kfold.stratified.validation(dataset,"random")
round(random.accuracy*100,2)
# Performance of the majority class model
majority.accuracy <- kfold.stratified.validation(dataset,"majority")
round(majority.accuracy*100,2)
# Performance of the PCA+FDA model
pca.dataset <- pca.computation(csvData2,52)
fda.accuracy <- kfold.stratified.validation(pca.dataset,"pcafda")
round(fda.accuracy*100,2)
# Performance of the SVM model
svm.accuracy <- kfold.stratified.validation(dataset,"svm")
svm.accuracy
